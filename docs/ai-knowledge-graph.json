{
  "$schema": "https://codemind.dev/schemas/ai-knowledge-graph-v1.json",
  "generatedAt": "2025-10-28T00:00:00.000Z",
  "version": 1,
  "nodes": [
    {"id": "model:Project", "type": "Model", "name": "Project", "file": "prisma/schema.prisma", "description": "Root entity linking indexing, AI usage, AutoFix, PR/Issue, Chat."},
    {"id": "model:ProjectFile", "type": "Model", "name": "ProjectFile", "file": "prisma/schema.prisma", "description": "Tracks repository files and indexing status."},
    {"id": "model:CodeChunk", "type": "Model", "name": "CodeChunk", "file": "prisma/schema.prisma", "description": "Stores chunked code; embedding column currently string pgvector placeholder."},
    {"id": "model:AIModelUsage", "type": "Model", "name": "AIModelUsage", "file": "prisma/schema.prisma", "description": "Records token/cost metrics per AI operation."},
    {"id": "model:AutoFixSession", "type": "Model", "name": "AutoFixSession", "file": "prisma/schema.prisma", "description": "Lifecycle of an AI-driven fix session."},
    {"id": "model:AutoFixResult", "type": "Model", "name": "AutoFixResult", "file": "prisma/schema.prisma", "description": "Stores patch result metadata (diff stats)."},
    {"id": "model:PullRequest", "type": "Model", "name": "PullRequest", "file": "prisma/schema.prisma", "description": "GitHub PR snapshot for project."},
    {"id": "model:Issue", "type": "Model", "name": "Issue", "file": "prisma/schema.prisma", "description": "GitHub issue synced with analysis flags."},
    {"id": "model:ChatSession", "type": "Model", "name": "ChatSession", "file": "prisma/schema.prisma", "description": "Conversation container used by RAG & memory."},
    {"id": "model:Message", "type": "Model", "name": "Message", "file": "prisma/schema.prisma", "description": "Chat messages (user/assistant) with latency & token fields."},

    {"id": "service:FullRepositoryIndexer", "type": "Service", "name": "FullRepositoryIndexer", "file": "src/lib/full-repository-indexer.ts", "description": "Performs full GitHub tree scan, updates ProjectFile, creates CodeChunk."},
    {"id": "service:AIModelService", "type": "Service", "name": "AIModelService", "file": "src/lib/ai-model-service.ts", "description": "Unified chat completion across OpenAI/Anthropic, tracks usage."},
    {"id": "service:GitHubService", "type": "Service", "name": "GitHubService", "file": "src/lib/github-service.ts", "description": "Syncs PRs, Issues, Commits, Contributors; creates branches & PRs."},
    {"id": "service:AutoFixOrchestrator", "type": "Service", "name": "AutoFixOrchestrator", "file": "src/lib/auto-fix-orchestrator.ts", "description": "Generates heuristic/stub patches and applies/simulates PR creation."},
    {"id": "service:LangChainRAG", "type": "Service", "name": "LangChainRAG", "file": "src/app/lib/langchain-rag.ts", "description": "Retrieval-augmented generation using vector store & memory."},
    {"id": "service:JobProcessors", "type": "Service", "name": "JobProcessors", "file": "src/lib/job-processors.ts", "description": "Background workers: indexing, embeddings, PR analysis."},

    {"id": "workflow:Indexing", "type": "Workflow", "name": "Indexing Workflow", "description": "GitHub tree → ProjectFile upsert → CodeChunk creation → (embeddings job)."},
    {"id": "workflow:RAG", "type": "Workflow", "name": "RAG Workflow", "description": "User query → Retriever vector search → Prompt assembly with memory → Answer + source mapping."},
    {"id": "workflow:AutoFix", "type": "Workflow", "name": "AutoFix Workflow", "description": "Issue heuristic → Session → Patch stub(s) → Validation → Optional PR."},
    {"id": "workflow:PRAnalysis", "type": "Workflow", "name": "PR Analysis Workflow", "description": "PR data → Automated risk/quality scoring → Comment generation."},

    {"id": "api:projects:index", "type": "APIRoute", "name": "Full Index Route", "file": "src/app/api/projects/[id]/full-index/route.ts", "description": "Triggers full repository indexing job."},
    {"id": "api:projects:search", "type": "APIRoute", "name": "Project Search Route", "file": "src/app/api/projects/[id]/search/route.ts", "description": "Search across indexed project files/chunks."},
    {"id": "api:chat", "type": "APIRoute", "name": "Chat Route", "file": "src/app/api/chat/route.ts", "description": "Handles chat message & answer generation."},
    {"id": "api:auto-fix:start", "type": "APIRoute", "name": "AutoFix Start Route", "file": "src/app/api/autofix/start/route.ts", "description": "Starts an AutoFixSession."},
    {"id": "api:auto-fix:sessions", "type": "APIRoute", "name": "AutoFix Sessions Route", "file": "src/app/api/auto-fix/sessions/route.ts", "description": "Lists or manipulates AutoFix sessions."},
    {"id": "api:github:pull-requests", "type": "APIRoute", "name": "GitHub PR Sync", "file": "src/app/api/github/pull-requests/route.ts", "description": "Synchronizes pull requests."},
    {"id": "api:github:issues", "type": "APIRoute", "name": "GitHub Issue Sync", "file": "src/app/api/github/issues/route.ts", "description": "Synchronizes issues."},
    {"id": "api:analytics:ai-metrics", "type": "APIRoute", "name": "AI Metrics Route", "file": "src/app/api/analytics/ai-metrics/route.ts", "description": "Aggregates AI usage statistics."},

    {"id": "external:OpenAI", "type": "ExternalAPI", "name": "OpenAI", "description": "LLM provider for chat completions and embeddings."},
    {"id": "external:Anthropic", "type": "ExternalAPI", "name": "Anthropic", "description": "LLM provider for Claude models."},
    {"id": "external:GitHub", "type": "ExternalAPI", "name": "GitHub", "description": "Source repository data & PR/Issue operations."}
  ],
  "edges": [
    {"source": "service:FullRepositoryIndexer", "target": "model:ProjectFile", "type": "writes"},
    {"source": "service:FullRepositoryIndexer", "target": "model:CodeChunk", "type": "writes"},
    {"source": "service:JobProcessors", "target": "model:CodeChunk", "type": "updates", "description": "Embeddings batch update."},
    {"source": "service:AIModelService", "target": "model:AIModelUsage", "type": "writes"},
    {"source": "service:GitHubService", "target": "model:PullRequest", "type": "writes"},
    {"source": "service:GitHubService", "target": "model:Issue", "type": "writes"},
    {"source": "service:GitHubService", "target": "model:Commit", "type": "writes"},
    {"source": "service:AutoFixOrchestrator", "target": "model:AutoFixSession", "type": "writes"},
    {"source": "service:AutoFixOrchestrator", "target": "model:AutoFixResult", "type": "writes"},
    {"source": "service:LangChainRAG", "target": "model:ChatSession", "type": "reads"},
    {"source": "service:LangChainRAG", "target": "model:Message", "type": "writes"},
    {"source": "service:LangChainRAG", "target": "model:CodeChunk", "type": "reads", "description": "Vector retrieval."},
    {"source": "workflow:Indexing", "target": "service:FullRepositoryIndexer", "type": "invokes"},
    {"source": "workflow:Indexing", "target": "service:JobProcessors", "type": "invokes", "description": "Embedding generation job."},
    {"source": "workflow:RAG", "target": "service:LangChainRAG", "type": "invokes"},
    {"source": "workflow:RAG", "target": "service:AIModelService", "type": "invokes"},
    {"source": "workflow:AutoFix", "target": "service:AutoFixOrchestrator", "type": "invokes"},
    {"source": "workflow:PRAnalysis", "target": "service:JobProcessors", "type": "invokes"},
    {"source": "api:projects:index", "target": "workflow:Indexing", "type": "triggers"},
    {"source": "api:projects:search", "target": "service:LangChainRAG", "type": "queries"},
    {"source": "api:chat", "target": "workflow:RAG", "type": "triggers"},
    {"source": "api:auto-fix:start", "target": "workflow:AutoFix", "type": "triggers"},
    {"source": "api:auto-fix:sessions", "target": "model:AutoFixSession", "type": "queries"},
    {"source": "api:github:pull-requests", "target": "service:GitHubService", "type": "invokes"},
    {"source": "api:github:issues", "target": "service:GitHubService", "type": "invokes"},
    {"source": "api:analytics:ai-metrics", "target": "model:AIModelUsage", "type": "aggregates"},
    {"source": "service:FullRepositoryIndexer", "target": "external:GitHub", "type": "calls"},
    {"source": "service:GitHubService", "target": "external:GitHub", "type": "calls"},
    {"source": "service:AIModelService", "target": "external:OpenAI", "type": "calls"},
    {"source": "service:AIModelService", "target": "external:Anthropic", "type": "calls"},
    {"source": "service:LangChainRAG", "target": "external:OpenAI", "type": "calls"}
  ],
  "gaps": [
    {"id": "gap:embeddings-unified", "description": "Embedding generation disabled in FullRepositoryIndexer; only job processor path updates embeddings."},
    {"id": "gap:patch-planning", "description": "AutoFix patch logic is stub header/LLM_EDIT insertion; lacks semantic diff & test integration."},
    {"id": "gap:rbac-depth", "description": "Advanced RBAC checks and workspace stats TODOs present in code (auth/rbac modules)."},
    {"id": "gap:token-accounting", "description": "LangChain RAG uses approximate token counts; no precise accounting."},
    {"id": "gap:vector-column", "description": "CodeChunk.embedding stored as String, pgvector typed update pathway partially implemented."}
  ]
}
