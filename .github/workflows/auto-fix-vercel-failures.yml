name: Auto Fix Build & Deployment Failures

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
  repository_dispatch:
    types: [vercel-build-failed]
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [ main, develop ]

permissions:
  contents: read   # Read repository contents
  issues: write    # Create GitHub issues with analysis results
  pull-requests: write  # Future: Create auto-fix PRs

jobs:
  analyze-build-failure:
    runs-on: ubuntu-latest
    # Run if: CI/CD workflow failed, or repository dispatch event, or manual trigger
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'repository_dispatch' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'failure') ||
      (github.event_name == 'push')
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '9'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Determine failure type and source
        id: failure-detection
        run: |
          echo "🔍 Determining failure type..."
          
          # Determine what triggered this workflow
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            echo "📋 Build failure detected from CI/CD pipeline"
            echo "failure_type=build" >> $GITHUB_OUTPUT
            echo "failure_source=github" >> $GITHUB_OUTPUT
            
            echo "FAILURE_TYPE=build" >> $GITHUB_ENV
            echo "WORKFLOW_RUN_ID=${{ github.event.workflow_run.id }}" >> $GITHUB_ENV
            echo "FAILURE_SOURCE=github" >> $GITHUB_ENV
            
            # Create logs directory
            mkdir -p logs
            
            # Fetch failed workflow logs using GitHub API
            echo "📄 Fetching GitHub workflow logs..."
            curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/jobs" \
              > logs/github_jobs.json
            
            # Extract failed job logs
            FAILED_JOB_ID=$(jq -r '.jobs[] | select(.conclusion == "failure") | .id' logs/github_jobs.json | head -1)
            
            if [ -n "$FAILED_JOB_ID" ] && [ "$FAILED_JOB_ID" != "null" ]; then
              echo "📥 Downloading logs for failed job: $FAILED_JOB_ID"
              curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${{ github.repository }}/actions/jobs/$FAILED_JOB_ID/logs" \
                > logs/github_build_logs.txt
              
              echo "JOB_ID=$FAILED_JOB_ID" >> $GITHUB_ENV
              echo "has_logs=true" >> $GITHUB_OUTPUT
            else
              echo "⚠️ Could not find failed job ID"
              echo "has_logs=false" >> $GITHUB_OUTPUT
            fi
            
          elif [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            echo "📋 Vercel deployment failure detected from webhook"
            echo "failure_type=deployment" >> $GITHUB_OUTPUT
            echo "failure_source=vercel" >> $GITHUB_OUTPUT
            
            echo "FAILURE_TYPE=deployment" >> $GITHUB_ENV
            echo "FAILURE_SOURCE=vercel" >> $GITHUB_ENV
            
          else
            echo "📋 Manual trigger or push event - checking for recent failures"
            echo "failure_type=check" >> $GITHUB_OUTPUT
            echo "failure_source=manual" >> $GITHUB_OUTPUT
            
            echo "FAILURE_TYPE=check" >> $GITHUB_ENV
            echo "FAILURE_SOURCE=manual" >> $GITHUB_ENV
          fi
          
          echo "Failure type: $(echo $FAILURE_TYPE)"
          echo "Failure source: $(echo $FAILURE_SOURCE)"

      - name: Fetch Vercel deployment logs
        if: steps.failure-detection.outputs.failure_source == 'vercel' || steps.failure-detection.outputs.failure_type == 'check'
        run: |
          echo "🔍 Fetching latest failed Vercel deployment..."
          
          # Get the latest failed deployment
          DEPLOYMENT_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
            "https://api.vercel.com/v6/deployments?projectId=${{ secrets.VERCEL_PROJECT_ID }}&state=ERROR&limit=1")
          
          echo "Deployment response: $DEPLOYMENT_RESPONSE"
          
          # Extract deployment ID
          DEPLOYMENT_ID=$(echo "$DEPLOYMENT_RESPONSE" | jq -r '.deployments[0].uid // empty')
          
          if [ -z "$DEPLOYMENT_ID" ] || [ "$DEPLOYMENT_ID" = "null" ]; then
            echo "✅ No failed deployments found!"
            echo "NO_FAILURES=true" >> $GITHUB_ENV
            exit 0
          fi
          
          echo "❌ Found failed deployment: $DEPLOYMENT_ID"
          echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV
          
          # Fetch detailed build logs
          echo "📄 Fetching build logs..."
          curl -s -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
            "https://api.vercel.com/v2/deployments/$DEPLOYMENT_ID/events?teamId=${{ secrets.VERCEL_TEAM_ID }}" \
            > vercel_logs.json
          
          # Check if logs were fetched successfully
          if [ ! -s vercel_logs.json ]; then
            echo "❌ Failed to fetch build logs"
            exit 1
          fi
          
          echo "📄 Build logs fetched successfully"

      - name: Analyze logs with our TypeScript script
        if: env.NO_FAILURES != 'true'
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPO: ${{ github.repository }}
        run: |
          echo "🤖 Running AI analysis with our enhanced script..."
          pnpm run analyze-vercel

      - name: Check for AI analysis results
        if: env.NO_FAILURES != 'true'
        run: |
          if [ -f "logs/vercel-fail.json" ]; then
            echo "📋 Analysis completed - checking results..."
            
            # Extract analysis summary for commit message
            SUMMARY=$(jq -r '.analysis.summary // "Build failure analysis completed"' logs/vercel-fail.json)
            CAUSE=$(jq -r '.analysis.cause // "Unknown cause"' logs/vercel-fail.json)
            FIX=$(jq -r '.analysis.fix // "See analysis for details"' logs/vercel-fail.json)
            
            echo "FAILURE_SUMMARY=$SUMMARY" >> $GITHUB_ENV
            echo "FAILURE_CAUSE=$CAUSE" >> $GITHUB_ENV
            echo "FAILURE_FIX=$FIX" >> $GITHUB_ENV
            
            # Create a comprehensive analysis markdown file
            cat > ai_analysis.md << EOF
          # 🔍 Vercel Build Failure Analysis
          
          **Generated on:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          **Deployment ID:** $DEPLOYMENT_ID
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          ## ❌ Build Failure Summary
          $SUMMARY
          
          ## 🔍 Root Cause Analysis
          $CAUSE
          
          ## 🛠️ Suggested Fix
          $FIX
          
          ## 📊 Full Analysis
          \`\`\`json
          $(cat logs/vercel-fail.json | jq '.')
          \`\`\`
          
          ---
          *This analysis was generated automatically by our AI-powered build failure analyzer.*
          EOF
            
            echo "✅ Analysis report created"
          else
            echo "❌ No analysis file found"
            exit 1
          fi

      - name: Create GitHub Issue with Analysis
        if: env.NO_FAILURES != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read the analysis file if it exists
            let analysisContent = '';
            if (fs.existsSync('ai_analysis.md')) {
              analysisContent = fs.readFileSync('ai_analysis.md', 'utf8');
            } else {
              analysisContent = `# 🤖 Vercel Build Failure Analysis
              
              **Deployment ID:** ${process.env.DEPLOYMENT_ID}
              **Failure Summary:** ${process.env.FAILURE_SUMMARY}
              **Root Cause:** ${process.env.FAILURE_CAUSE}
              **Suggested Fix:** ${process.env.FAILURE_FIX}
              
              Generated automatically by CodeMind Auto-Fix System.`;
            }
            
            // Create issue with analysis
            const title = `🚨 Build Failure: ${process.env.FAILURE_SUMMARY || 'Deployment Failed'}`;
            const body = `${analysisContent}
            
            ---
            
            **🔄 Auto-Analysis Status:** Complete
            **📊 Confidence Level:** High
            **⚡ Generated by:** CodeMind Auto-Fix System
            **📅 Analysis Time:** ${new Date().toISOString()}
            
            > This issue was automatically created to track and resolve the deployment failure. 
            > Please follow the suggested fix steps above and close this issue once resolved.`;
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['deployment-failure', 'auto-analysis', 'vercel']
            });
            
            console.log(`✅ Created GitHub issue #${issue.data.number} with analysis results`);
            console.log(`🔗 Issue URL: ${issue.data.html_url}`);

      - name: Create GitHub Issue for repeated failures
        if: env.NO_FAILURES != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            // Check if this is a repeated failure that should create an issue
            const fs = require('fs');
            
            if (!fs.existsSync('logs/vercel-fail.json')) {
              console.log('No analysis file found, skipping issue creation');
              return;
            }
            
            const analysis = JSON.parse(fs.readFileSync('logs/vercel-fail.json', 'utf8'));
            
            // Only create issue if failure count >= 3 for the same commit
            if (analysis.failureTracking && analysis.failureTracking.failureCount >= 3) {
              const title = `🚨 Repeated Build Failure: ${analysis.analysis.summary}`;
              const body = `
              ## 🚨 Repeated Build Failure Alert
              
              This commit has failed **${analysis.failureTracking.failureCount} times** in a row.
              
              **Commit SHA:** \`${analysis.failureTracking.commitSha}\`
              **First Failure:** ${analysis.failureTracking.firstFailure}
              **Latest Failure:** ${analysis.failureTracking.lastFailure}
              
              ## ❌ Build Failure Summary
              ${analysis.analysis.summary}
              
              ## 🔍 Root Cause Analysis  
              ${analysis.analysis.cause}
              
              ## 🛠️ Suggested Fix
              ${analysis.analysis.fix}
              
              ## 📋 Action Required
              - [ ] Review the suggested fix above
              - [ ] Test the fix locally before deploying
              - [ ] Update relevant documentation if needed
              - [ ] Close this issue once resolved
              
              ---
              
              **Deployment ID:** \`${analysis.deployment.uid}\`
              **Auto-generated by:** Vercel Build Failure Analyzer
              `;
              
              // Create the issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['bug', 'deployment', 'automated', 'high-priority']
              });
              
              console.log('✅ GitHub issue created for repeated failure');
            } else {
              console.log('📊 Failure count not high enough for issue creation');
            }

      - name: Summary
        if: always()
        run: |
          echo "🎉 Vercel Build Failure Analysis Workflow Complete!"
          echo ""
          if [ "$NO_FAILURES" = "true" ]; then
            echo "✅ Status: No failed deployments found"
          else
            echo "📊 Status: Analysis completed for deployment $DEPLOYMENT_ID"
            echo "📁 Files created:"
            echo "  - ai_analysis.md (human-readable report)"
            echo "  - logs/vercel-fail.json (complete analysis data)"
          fi
          echo ""
          echo "🔗 View full analysis: https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/ai_analysis.md"