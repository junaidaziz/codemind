generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

model User {
  id                     String                  @id @default(cuid())
  email                  String?                 @unique
  name                   String?
  createdAt              DateTime                @default(now())
  image                  String?
  role                   String                  @default("user")
  sessions               ChatSession[]
  projects               Project[]
  toolExecutions         ToolExecution[]
  agentMemories          AgentMemory[]
  agentFeedbacks         AgentFeedback[]
  feedbackAnalytics      FeedbackAnalytics[]
  ownedOrganizations     Organization[]          @relation("OrganizationOwner")
  organizationMemberships OrganizationMember[]
  sentInvites            OrganizationInvite[]    @relation("InviteSender")
  invitedMemberships     OrganizationMember[]    @relation("MembershipInviter")
  autoFixSessions        AutoFixSession[]
  autoFixApprovals       AutoFixSession[]        @relation("AutoFixApprover")
  autoFixMetrics         AutoFixMetrics[]        @relation("AutoFixMetricsUser")
}

model Project {
  id                String              @id @default(cuid())
  name              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  defaultBranch     String              @default("main")
  githubUrl         String
  lastIndexedAt     DateTime?
  lastFullScanAt    DateTime?           // Track when full repository scan was last performed
  ownerId           String
  organizationId    String?             // Optional: project can belong to organization or user
  status            String              @default("idle")
  visibility        String              @default("public")
  sessions          ChatSession[]
  files             CodeChunk[]
  projectFiles      ProjectFile[]       @relation("ProjectFiles")
  toolExecutions    ToolExecution[]
  agentMemories     AgentMemory[]
  agentFeedbacks    AgentFeedback[]
  feedbackAnalytics FeedbackAnalytics[]
  autoFixSessions   AutoFixSession[]
  autoFixConfig     AutoFixConfig?
  autoFixMetrics    AutoFixMetrics[]
  owner             User                @relation(fields: [ownerId], references: [id])
  organization      Organization?       @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
}

model ChatSession {
  id           String    @id @default(cuid())
  projectId    String
  userId       String
  title        String    @default("New Chat")
  summary      String?   // For long-term memory and conversation summarization
  totalTokens  Int       @default(0) // Track total tokens used in this session
  messageCount Int       @default(0) // Track number of messages for memory management
  createdAt    DateTime  @default(now())
  lastActiveAt DateTime  @default(now()) // Track when session was last used
  project      Project   @relation(fields: [projectId], references: [id])
  user         User      @relation(fields: [userId], references: [id])
  messages     Message[]

  @@index([lastActiveAt])
}

model Message {
  id             String         @id @default(cuid())
  sessionId      String
  role           String         // user | assistant | system  
  content        String
  tokenCount     Int?           // Tokens in this specific message
  contextTokens  Int?           // Tokens used for context when generating this message
  memoryIncluded Boolean        @default(false) // Whether this message was included in memory context
  latencyMs      Int?
  createdAt      DateTime       @default(now())
  session        ChatSession    @relation(fields: [sessionId], references: [id])
  feedback       AgentFeedback?

  @@index([sessionId, createdAt])
}

/// Each row = code chunk with its embedding
model CodeChunk {
  id          String       @id @default(cuid())
  projectId   String
  projectFileId String?    // Reference to the full file this chunk belongs to
  path        String
  sha         String
  language    String
  startLine   Int
  endLine     Int
  content     String
  tokenCount  Int
  embedding   String?      // Temporary: JSON string until vector extension is enabled
  updatedAt   DateTime     @updatedAt
  project     Project      @relation(fields: [projectId], references: [id])
  projectFile ProjectFile? @relation("FileChunks", fields: [projectFileId], references: [id])

  @@index([projectId])
  @@index([projectId, path])
  @@index([projectFileId])
}

/// Full file metadata for repository synchronization
model ProjectFile {
  id           String   @id @default(cuid())
  projectId    String
  relativePath String   // Path relative to repository root
  absolutePath String?  // Full system path when cloned locally
  fileType     String   // typescript, javascript, react_component, etc.
  language     String   // programming language
  extension    String   // file extension (.ts, .js, etc.)
  size         Int      // file size in bytes
  lines        Int      // number of lines
  lastModified DateTime // file modification time
  gitSha       String?  // Git SHA hash of file content
  isIndexed    Boolean  @default(false) // whether file has been chunked and embedded
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  project      Project  @relation("ProjectFiles", fields: [projectId], references: [id])
  chunks       CodeChunk[] @relation("FileChunks")

  @@unique([projectId, relativePath])
  @@index([projectId])
  @@index([projectId, isIndexed])
  @@index([projectId, fileType])
  @@index([lastModified])
}

model ToolExecution {
  id              String   @id @default(cuid())
  toolName        String
  projectId       String
  userId          String
  sessionId       String?
  input           String
  output          String
  success         Boolean
  executionTimeMs Int
  error           String?
  timestamp       DateTime @default(now())
  metadata        String?  // JSON string for additional data
  project         Project  @relation(fields: [projectId], references: [id])
  user            User     @relation(fields: [userId], references: [id])

  @@index([toolName, timestamp])
  @@index([projectId, timestamp])
  @@index([userId, timestamp])
}

model AgentMemory {
  id                String   @id @default(cuid())
  sessionId         String
  projectId         String
  userId            String
  command           String   // The agent command executed
  memorySnapshot    String   // JSON snapshot of conversation memory at this point
  tokenUsage        Int      // Total tokens used up to this point
  memorySize        Int      // Size of memory in tokens
  contextRelevance  Float?   // Relevance score of retrieved context (0-1)
  responseQuality   Float?   // Quality score of agent response (0-1) 
  executionTimeMs   Int      // Time taken for this agent execution
  toolsUsed         String   // JSON array of tools used
  summary           String?  // Auto-generated summary of this interaction
  createdAt         DateTime @default(now())
  project           Project  @relation(fields: [projectId], references: [id])
  user              User     @relation(fields: [userId], references: [id])

  @@index([sessionId])
  @@index([projectId, createdAt])
  @@index([userId, createdAt])
  @@index([command, createdAt])
}

model AgentFeedback {
  id              String                @id @default(cuid())
  sessionId       String
  messageId       String                @unique // Links to specific message that was rated
  userId          String
  projectId       String
  feedbackType    AgentFeedbackType
  rating          Int                   // 1-5 scale
  comment         String?               // Optional user comment
  category        AgentFeedbackCategory // What aspect was rated
  responseTime    Int?                  // How long user took to provide feedback (ms)
  contextData     String?               // JSON with additional context (tools used, etc.)
  createdAt       DateTime              @default(now())
  user            User                  @relation(fields: [userId], references: [id])
  project         Project               @relation(fields: [projectId], references: [id])
  message         Message               @relation(fields: [messageId], references: [id])

  @@index([sessionId])
  @@index([userId, createdAt])
  @@index([projectId, createdAt])
  @@index([feedbackType, rating])
  @@index([category, rating])
}

model FeedbackAnalytics {
  id              String   @id @default(cuid())
  projectId       String
  userId          String?  // Null for aggregated project-level analytics
  period          String   // day, week, month
  periodStart     DateTime
  periodEnd       DateTime
  totalFeedbacks  Int      @default(0)
  avgRating       Float?
  ratingCounts    String   // JSON: {"1": 2, "2": 5, "3": 10, "4": 15, "5": 8}
  categoryBreakdown String // JSON: {"accuracy": 4.2, "helpfulness": 4.5, ...}
  topIssues       String?  // JSON array of most common issues
  improvement     Float?   // Rating improvement vs previous period
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  project         Project  @relation(fields: [projectId], references: [id])
  user            User?    @relation(fields: [userId], references: [id])

  @@unique([projectId, userId, period, periodStart])
  @@index([projectId, period, periodStart])
  @@index([userId, period, periodStart])
}

enum AgentFeedbackType {
  POSITIVE
  NEGATIVE
  NEUTRAL
}

enum AgentFeedbackCategory {
  ACCURACY      // How accurate was the response
  HELPFULNESS   // How helpful was the response
  RELEVANCE     // How relevant was the response
  COMPLETENESS  // Was the response complete
  CLARITY       // How clear was the response
  SPEED         // Response speed satisfaction
  OVERALL       // Overall satisfaction
}

enum OrganizationRole {
  OWNER    // Full control over organization
  ADMIN    // Can manage members and settings
  EDITOR   // Can create and edit projects
  VIEWER   // Read-only access
}

enum AutoFixStatus {
  PENDING       // Auto-fix session created, waiting to start
  ANALYZING     // Analyzing logs for issues
  FIXING        // Generating fixes
  CREATING_PR   // Creating pull request
  COMPLETED     // Successfully completed
  FAILED        // Failed to complete
  CANCELLED     // Manually cancelled
}

enum AutoFixTriggerType {
  MANUAL        // Manually triggered by user
  WEBHOOK       // Triggered by GitHub webhook
  CI_FAILURE    // Triggered by CI build failure
  SCHEDULE      // Triggered by scheduled job
}

model Organization {
  id          String                 @id @default(cuid())
  name        String
  description String?
  slug        String                 @unique
  avatarUrl   String?
  plan        String                 @default("free") // free, pro, enterprise
  maxProjects Int                    @default(5)
  maxMembers  Int                    @default(10)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  ownerId     String
  owner       User                   @relation("OrganizationOwner", fields: [ownerId], references: [id])
  members     OrganizationMember[]
  invites     OrganizationInvite[]
  projects    Project[]

  @@index([ownerId])
}

model OrganizationMember {
  id             String           @id @default(cuid())
  organizationId String
  userId         String
  role           OrganizationRole @default(VIEWER)
  invitedAt      DateTime?
  joinedAt       DateTime         @default(now())
  invitedBy      String?
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  inviter        User?            @relation("MembershipInviter", fields: [invitedBy], references: [id])

  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
}

model OrganizationInvite {
  id             String           @id @default(cuid())
  organizationId String
  email          String
  role           OrganizationRole @default(VIEWER)
  token          String           @unique
  expiresAt      DateTime
  createdAt      DateTime         @default(now())
  invitedBy      String
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter        User             @relation("InviteSender", fields: [invitedBy], references: [id])

  @@index([organizationId])
  @@index([email])
}

model AutoFixSession {
  id                 String               @id @default(cuid())
  projectId          String
  userId             String?              // Optional: can be triggered by webhooks without user
  status             AutoFixStatus        @default(PENDING)
  triggerType        AutoFixTriggerType   @default(MANUAL)
  
  // Input data
  logContent         String?              // Original log content that triggered the fix
  issuesDetected     String               // JSON array of detected issues
  projectContext     String?              // Additional project context
  
  // Processing data
  analysisResult     String?              // JSON result of log analysis
  fixesGenerated     String?              // JSON array of generated fixes
  
  // Output data
  branchName         String?              // Created branch name
  commitSha          String?              // Created commit SHA
  prUrl              String?              // Pull request URL
  prNumber           Int?                 // Pull request number
  filesChanged       String?              // JSON array of changed file paths
  
  // Metadata
  processingTimeMs   Int?                 // Time taken to process (milliseconds)
  errorMessage       String?              // Error message if failed
  confidence         Float?               // Confidence level of fixes (0-1)
  
  // Approval workflow
  requiresApproval   Boolean              @default(true)
  approvedAt         DateTime?
  approvedBy         String?
  
  // Timestamps
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  startedAt          DateTime?            // When processing started
  completedAt        DateTime?            // When processing completed
  
  // Relations
  project            Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user               User?                @relation(fields: [userId], references: [id], onDelete: SetNull)
  approver           User?                @relation("AutoFixApprover", fields: [approvedBy], references: [id])
  results            AutoFixResult[]
  
  @@index([projectId, createdAt])
  @@index([userId, createdAt])
  @@index([status])
  @@index([triggerType, createdAt])
}

model AutoFixResult {
  id                 String               @id @default(cuid())
  sessionId          String
  
  // Result details
  success            Boolean
  message            String
  issueType          String               // Type of issue fixed
  severity           String               // Severity of issue
  
  // File changes
  filePath           String               // Path of changed file
  changeType         String               // Type of change (create, modify, delete)
  linesAdded         Int                  @default(0)
  linesRemoved       Int                  @default(0)
  
  // Quality metrics
  confidence         Float?               // Confidence in this specific fix (0-1)
  testability        String?              // Whether change is testable
  reviewComplexity   String?              // Complexity of manual review needed
  
  // Timestamps
  createdAt          DateTime             @default(now())
  
  // Relations
  session            AutoFixSession       @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@index([sessionId])
  @@index([success, createdAt])
  @@index([issueType, severity])
}

model AutoFixConfig {
  id                 String               @id @default(cuid())
  projectId          String               @unique
  
  // Configuration settings
  enabled            Boolean              @default(true)
  requireApproval    Boolean              @default(true)
  maxFixesPerHour    Int                  @default(3)
  
  // Branch and commit settings
  branchPrefix       String               @default("codemind/auto-fix")
  commitPrefix       String               @default("fix: ")
  
  // PR template settings
  prTitle            String               @default("🤖 Auto Fix: {issue}")
  prBody             String               @default("This PR was automatically created by CodeMind to fix detected issues.\n\n## Changes Made\n{changes}\n\n## Issue Analysis\n{analysis}\n\n## Testing\n- [ ] Builds successfully\n- [ ] Tests pass\n- [ ] Manual review completed\n\nPlease review the changes carefully before merging.")
  
  // Issue type preferences
  autoFixBuildErrors Boolean              @default(true)
  autoFixTestFailures Boolean             @default(true)
  autoFixLintErrors  Boolean              @default(true)
  autoFixSecurity    Boolean              @default(false) // More conservative default
  autoFixDependencies Boolean             @default(true)
  autoFixSyntax      Boolean              @default(true)
  
  // Notification preferences
  notifyOnSuccess    Boolean              @default(true)
  notifyOnFailure    Boolean              @default(true)
  
  // Timestamps
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  
  // Relations
  project            Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([projectId])
}

model AutoFixMetrics {
  id                 String               @id @default(cuid())
  projectId          String
  userId             String?              // Null for project-level metrics
  
  // Time period
  period             String               // 'day', 'week', 'month'
  periodStart        DateTime
  periodEnd          DateTime
  
  // Session metrics
  totalSessions      Int                  @default(0)
  successfulSessions Int                  @default(0)
  failedSessions     Int                  @default(0)
  
  // Issue metrics
  totalIssuesDetected Int                 @default(0)
  totalIssuesFixed   Int                  @default(0)
  
  // Issue type breakdown (JSON)
  issueTypeBreakdown String?              // JSON object with counts per issue type
  
  // Performance metrics
  avgProcessingTime  Int?                 // Average processing time in ms
  avgConfidence      Float?               // Average confidence score
  
  // PR metrics
  totalPRsCreated    Int                  @default(0)
  totalPRsMerged     Int                  @default(0)
  avgPRSize          Int?                 // Average number of files changed
  
  // Quality metrics
  humanInterventionRate Float?            // Rate of sessions requiring human intervention
  rollbackRate       Float?               // Rate of PRs that were reverted
  
  // Timestamps
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  
  // Relations
  project            Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user               User?                @relation("AutoFixMetricsUser", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, userId, period, periodStart])
  @@index([projectId, period, periodStart])
  @@index([userId, period, periodStart])
}
