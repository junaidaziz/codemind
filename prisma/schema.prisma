generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

model User {
  id             String          @id @default(cuid())
  email          String?         @unique
  name           String?
  createdAt      DateTime        @default(now())
  image          String?
  role           String          @default("user")
  sessions       ChatSession[]
  projects       Project[]
  toolExecutions ToolExecution[]
  agentMemories  AgentMemory[]
}

model Project {
  id             String          @id @default(cuid())
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  defaultBranch  String          @default("main")
  githubUrl      String
  lastIndexedAt  DateTime?
  ownerId        String
  status         String          @default("idle")
  visibility     String          @default("public")
  sessions       ChatSession[]
  files          CodeChunk[]
  toolExecutions ToolExecution[]
  agentMemories  AgentMemory[]
  owner          User            @relation(fields: [ownerId], references: [id])
}

model ChatSession {
  id           String    @id @default(cuid())
  projectId    String
  userId       String
  title        String    @default("New Chat")
  summary      String?   // For long-term memory and conversation summarization
  totalTokens  Int       @default(0) // Track total tokens used in this session
  messageCount Int       @default(0) // Track number of messages for memory management
  createdAt    DateTime  @default(now())
  lastActiveAt DateTime  @default(now()) // Track when session was last used
  project      Project   @relation(fields: [projectId], references: [id])
  user         User      @relation(fields: [userId], references: [id])
  messages     Message[]

  @@index([lastActiveAt])
}

model Message {
  id             String      @id @default(cuid())
  sessionId      String
  role           String      // user | assistant | system
  content        String
  tokenCount     Int?        // Tokens in this specific message
  contextTokens  Int?        // Tokens used for context when generating this message
  memoryIncluded Boolean     @default(false) // Whether this message was included in memory context
  latencyMs      Int?
  createdAt      DateTime    @default(now())
  session        ChatSession @relation(fields: [sessionId], references: [id])

  @@index([sessionId, createdAt])
}

/// Each row = code chunk with its embedding
model CodeChunk {
  id         String                @id @default(cuid())
  projectId  String
  path       String
  sha        String
  language   String
  startLine  Int
  endLine    Int
  content    String
  tokenCount Int
  embedding  Unsupported("vector")
  updatedAt  DateTime              @updatedAt
  project    Project               @relation(fields: [projectId], references: [id])

  @@index([projectId])
  @@index([projectId, path])
  @@index([projectId, embedding])
}

model ToolExecution {
  id              String   @id @default(cuid())
  toolName        String
  projectId       String
  userId          String
  sessionId       String?
  input           String
  output          String
  success         Boolean
  executionTimeMs Int
  error           String?
  timestamp       DateTime @default(now())
  metadata        String?  // JSON string for additional data
  project         Project  @relation(fields: [projectId], references: [id])
  user            User     @relation(fields: [userId], references: [id])

  @@index([toolName, timestamp])
  @@index([projectId, timestamp])
  @@index([userId, timestamp])
}

model AgentMemory {
  id                String   @id @default(cuid())
  sessionId         String
  projectId         String
  userId            String
  command           String   // The agent command executed
  memorySnapshot    String   // JSON snapshot of conversation memory at this point
  tokenUsage        Int      // Total tokens used up to this point
  memorySize        Int      // Size of memory in tokens
  contextRelevance  Float?   // Relevance score of retrieved context (0-1)
  responseQuality   Float?   // Quality score of agent response (0-1) 
  executionTimeMs   Int      // Time taken for this agent execution
  toolsUsed         String   // JSON array of tools used
  summary           String?  // Auto-generated summary of this interaction
  createdAt         DateTime @default(now())
  project           Project  @relation(fields: [projectId], references: [id])
  user              User     @relation(fields: [userId], references: [id])

  @@index([sessionId])
  @@index([projectId, createdAt])
  @@index([userId, createdAt])
  @@index([command, createdAt])
}
