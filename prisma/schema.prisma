generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

model ActivityLog {
  id           String         @id
  projectId    String
  userId       String?
  activityType ActivityType
  entityType   String
  entityId     String
  description  String
  metadata     String?
  duration     Int?
  impact       ActivityImpact @default(LOW)
  createdAt    DateTime       @default(now())
  Project      Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  User         User?          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([activityType, createdAt])
  @@index([projectId, createdAt])
  @@index([userId, createdAt])
}

model ActivityEvent {
  id          String              @id @default(cuid())
  projectId   String
  userId      String?
  eventType   ActivityEventType
  entityType  String // "indexing", "apr_session", "chat_message", "auto_fix", "code_generation"
  entityId    String?
  title       String
  description String?             @db.Text
  metadata    Json? // JSON data for additional info (file paths, line numbers, etc.)
  status      ActivityEventStatus @default(IN_PROGRESS)
  duration    Int? // duration in milliseconds
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId, createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
  @@index([eventType, createdAt(sort: Desc)])
  @@index([status, createdAt(sort: Desc)])
  @@index([projectId, eventType, createdAt(sort: Desc)])
}

model AgentFeedback {
  id           String                @id
  sessionId    String
  messageId    String                @unique
  userId       String
  projectId    String
  feedbackType AgentFeedbackType
  rating       Int
  comment      String?
  category     AgentFeedbackCategory
  responseTime Int?
  contextData  String?
  createdAt    DateTime              @default(now())
  Message      Message               @relation(fields: [messageId], references: [id])
  Project      Project               @relation(fields: [projectId], references: [id])
  User         User                  @relation(fields: [userId], references: [id])

  @@index([category, rating])
  @@index([feedbackType, rating])
  @@index([projectId, createdAt])
  @@index([sessionId])
  @@index([userId, createdAt])
}

model AgentMemory {
  id               String   @id
  sessionId        String
  projectId        String
  userId           String
  command          String
  memorySnapshot   String
  tokenUsage       Int
  memorySize       Int
  contextRelevance Float?
  responseQuality  Float?
  executionTimeMs  Int
  toolsUsed        String
  summary          String?
  createdAt        DateTime @default(now())
  Project          Project  @relation(fields: [projectId], references: [id])
  User             User     @relation(fields: [userId], references: [id])

  @@index([command, createdAt])
  @@index([projectId, createdAt])
  @@index([sessionId])
  @@index([userId, createdAt])
}

model AutoFixAttempt {
  id             String         @id
  sessionId      String
  attemptNumber  Int
  filesModified  String[]       @default([])
  prompt         String
  aiResponse     String
  codeSnippets   String
  success        Boolean        @default(false)
  errorMessage   String?
  createdAt      DateTime       @default(now())
  AutoFixSession AutoFixSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId, attemptNumber])
  @@index([sessionId])
}

model AutoFixConfig {
  id                  String   @id
  projectId           String   @unique
  enabled             Boolean  @default(true)
  requireApproval     Boolean  @default(true)
  maxFixesPerHour     Int      @default(3)
  branchPrefix        String   @default("codemind/auto-fix")
  commitPrefix        String   @default("fix: ")
  prTitle             String   @default("ðŸ¤– Auto Fix: {issue}")
  prBody              String   @default("This PR was automatically created by CodeMind to fix detected issues.\n\n## Changes Made\n{changes}\n\n## Issue Analysis\n{analysis}\n\n## Testing\n- [ ] Builds successfully\n- [ ] Tests pass\n- [ ] Manual review completed\n\nPlease review the changes carefully before merging.")
  autoFixBuildErrors  Boolean  @default(true)
  autoFixTestFailures Boolean  @default(true)
  autoFixLintErrors   Boolean  @default(true)
  autoFixSecurity     Boolean  @default(false)
  autoFixDependencies Boolean  @default(true)
  autoFixSyntax       Boolean  @default(true)
  notifyOnSuccess     Boolean  @default(true)
  notifyOnFailure     Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime
  Project             Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model AutoFixHistory {
  id                String    @id
  sessionId         String    @unique
  projectId         String
  issueDescription  String
  attempts          String
  finalStatus       String
  prNumber          Int?
  prUrl             String?
  totalAttempts     Int       @default(0)
  validationsPassed Int       @default(0)
  validationsFailed Int       @default(0)
  reviewFindings    Int       @default(0)
  retryCount        Int       @default(0)
  createdAt         DateTime
  completedAt       DateTime?

  @@index([createdAt])
  @@index([finalStatus])
  @@index([projectId])
  @@index([sessionId])
}

model AutoFixMetrics {
  id                    String   @id
  projectId             String
  userId                String?
  period                String
  periodStart           DateTime
  periodEnd             DateTime
  totalSessions         Int      @default(0)
  successfulSessions    Int      @default(0)
  failedSessions        Int      @default(0)
  totalIssuesDetected   Int      @default(0)
  totalIssuesFixed      Int      @default(0)
  issueTypeBreakdown    String?
  avgProcessingTime     Int?
  avgConfidence         Float?
  totalPRsCreated       Int      @default(0)
  totalPRsMerged        Int      @default(0)
  avgPRSize             Int?
  humanInterventionRate Float?
  rollbackRate          Float?
  createdAt             DateTime @default(now())
  updatedAt             DateTime
  Project               Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  User                  User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId, period, periodStart])
  @@index([projectId, period, periodStart])
  @@index([userId, period, periodStart])
}

model AutoFixResult {
  id               String         @id
  sessionId        String
  success          Boolean
  message          String
  issueType        String
  severity         String
  filePath         String
  changeType       String
  linesAdded       Int            @default(0)
  linesRemoved     Int            @default(0)
  confidence       Float?
  testability      String?
  reviewComplexity String?
  createdAt        DateTime       @default(now())
  AutoFixSession   AutoFixSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([issueType, severity])
  @@index([sessionId])
  @@index([success, createdAt])
}

model AutoFixReview {
  id              String         @id
  sessionId       String
  reviewType      String
  severity        String
  filePath        String
  lineNumber      Int?
  issue           String
  explanation     String
  suggestion      String?
  category        String
  tags            String[]       @default([])
  postedToGitHub  Boolean        @default(false)
  githubCommentId Int?
  references      String[]       @default([])
  createdAt       DateTime       @default(now())
  AutoFixSession  AutoFixSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([postedToGitHub])
  @@index([reviewType])
  @@index([sessionId])
  @@index([sessionId, severity])
}

model AutoFixSession {
  id                                   String              @id
  projectId                            String
  userId                               String?
  status                               AutoFixStatus       @default(PENDING)
  triggerType                          AutoFixTriggerType  @default(MANUAL)
  logContent                           String?
  issuesDetected                       String
  projectContext                       String?
  analysisResult                       String?
  fixesGenerated                       String?
  branchName                           String?
  commitSha                            String?
  prUrl                                String?
  prNumber                             Int?
  filesChanged                         String?
  processingTimeMs                     Int?
  errorMessage                         String?
  confidence                           Float?
  requiresApproval                     Boolean             @default(true)
  approvedAt                           DateTime?
  approvedBy                           String?
  createdAt                            DateTime            @default(now())
  updatedAt                            DateTime
  startedAt                            DateTime?
  completedAt                          DateTime?
  AutoFixAttempt                       AutoFixAttempt[]
  AutoFixResult                        AutoFixResult[]
  AutoFixReview                        AutoFixReview[]
  User_AutoFixSession_approvedByToUser User?               @relation("AutoFixSession_approvedByToUser", fields: [approvedBy], references: [id])
  Project                              Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  User_AutoFixSession_userIdToUser     User?               @relation("AutoFixSession_userIdToUser", fields: [userId], references: [id])
  AutoFixValidation                    AutoFixValidation[]

  @@index([projectId, createdAt])
  @@index([status])
  @@index([triggerType, createdAt])
  @@index([userId, createdAt])
}

model AutoFixValidation {
  id             String         @id
  sessionId      String
  attemptNumber  Int
  validationType String
  passed         Boolean
  output         String
  errors         String?
  duration       Int?
  executedAt     DateTime       @default(now())
  AutoFixSession AutoFixSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([passed])
  @@index([sessionId])
  @@index([sessionId, validationType])
}

model ChatSession {
  id           String    @id
  projectId    String
  userId       String
  title        String    @default("New Chat")
  summary      String?
  totalTokens  Int       @default(0)
  messageCount Int       @default(0)
  createdAt    DateTime  @default(now())
  lastActiveAt DateTime  @default(now())
  Project      Project   @relation(fields: [projectId], references: [id])
  User         User      @relation(fields: [userId], references: [id])
  Message      Message[]

  @@index([lastActiveAt])
}

model CodeChunk {
  id            String       @id
  projectId     String
  path          String
  sha           String
  language      String
  startLine     Int
  endLine       Int
  content       String
  tokenCount    Int
  embedding     String?
  updatedAt     DateTime
  projectFileId String?
  ProjectFile   ProjectFile? @relation(fields: [projectFileId], references: [id])
  Project       Project      @relation(fields: [projectId], references: [id])

  @@index([projectFileId])
  @@index([projectId])
  @@index([projectId, path])
}

model Commit {
  id            String       @id
  sha           String       @unique
  message       String
  author        String
  authorEmail   String?
  additions     Int?
  deletions     Int?
  date          DateTime
  url           String?
  projectId     String
  contributorId String?
  branch        String?
  isAiGenerated Boolean      @default(false)
  filesChanged  String[]     @default([])
  Contributor   Contributor? @relation(fields: [contributorId], references: [id])
  Project       Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([contributorId])
  @@index([date])
  @@index([projectId, branch])
  @@index([projectId, date])
}

model Contributor {
  id             String        @id
  githubId       String?       @unique
  username       String
  avatarUrl      String?
  email          String?
  name           String?
  projectId      String
  totalCommits   Int           @default(0)
  totalAdditions Int           @default(0)
  totalDeletions Int           @default(0)
  totalPRs       Int           @default(0)
  lastActiveAt   DateTime?
  joinedAt       DateTime      @default(now())
  Commit         Commit[]
  Project        Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  PullRequest    PullRequest[]

  @@unique([projectId, username])
  @@index([githubId])
  @@index([lastActiveAt])
  @@index([projectId])
}

model DeveloperInsights {
  id                      String   @id
  projectId               String
  userId                  String?
  period                  String
  periodStart             DateTime
  periodEnd               DateTime
  totalAiFixes            Int      @default(0)
  successfulFixes         Int      @default(0)
  failedFixes             Int      @default(0)
  successRate             Float    @default(0)
  estimatedHoursSaved     Float    @default(0)
  avgFixTimeMinutes       Int      @default(0)
  totalFixTimeMinutes     Int      @default(0)
  totalCommits            Int      @default(0)
  totalPRsCreated         Int      @default(0)
  totalPRsMerged          Int      @default(0)
  totalIssuesResolved     Int      @default(0)
  linesOfCodeFixed        Int      @default(0)
  bugsFixed               Int      @default(0)
  securityIssuesFixed     Int      @default(0)
  performanceImprovements Int      @default(0)
  avgCodeReviewTime       Int?
  prMergeRate             Float    @default(0)
  rollbackRate            Float    @default(0)
  createdAt               DateTime @default(now())
  updatedAt               DateTime
  Project                 Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  User                    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId, period, periodStart])
  @@index([projectId, period, periodStart])
  @@index([userId, period, periodStart])
}

model FeedbackAnalytics {
  id                String   @id
  projectId         String
  userId            String?
  period            String
  periodStart       DateTime
  periodEnd         DateTime
  totalFeedbacks    Int      @default(0)
  avgRating         Float?
  ratingCounts      String
  categoryBreakdown String
  topIssues         String?
  improvement       Float?
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  Project           Project  @relation(fields: [projectId], references: [id])
  User              User?    @relation(fields: [userId], references: [id])

  @@unique([projectId, userId, period, periodStart])
  @@index([projectId, period, periodStart])
  @@index([userId, period, periodStart])
}

model Issue {
  id           String     @id
  projectId    String
  number       Int
  title        String
  body         String?
  state        IssueState @default(OPEN)
  htmlUrl      String
  authorLogin  String
  authorUrl    String
  assignees    String[]   @default([])
  labels       String[]   @default([])
  createdAt    DateTime
  updatedAt    DateTime
  closedAt     DateTime?
  aiAnalyzed   Boolean    @default(false)
  aiAnalyzedAt DateTime?
  aiSummary    String?
  aiFixPrUrl   String?
  Project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, number])
  @@index([projectId, createdAt])
  @@index([projectId, state])
}

model Message {
  id             String         @id
  sessionId      String
  role           String
  content        String
  tokenCount     Int?
  contextTokens  Int?
  memoryIncluded Boolean        @default(false)
  latencyMs      Int?
  createdAt      DateTime       @default(now())
  AgentFeedback  AgentFeedback?
  ChatSession    ChatSession    @relation(fields: [sessionId], references: [id])

  @@index([sessionId, createdAt])
}

model Organization {
  id                 String               @id
  name               String
  description        String?
  slug               String               @unique
  avatarUrl          String?
  plan               String               @default("free")
  maxProjects        Int                  @default(5)
  maxMembers         Int                  @default(10)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  ownerId            String
  User               User                 @relation(fields: [ownerId], references: [id])
  OrganizationInvite OrganizationInvite[]
  OrganizationMember OrganizationMember[]
  Project            Project[]

  @@index([ownerId])
}

model OrganizationInvite {
  id             String           @id
  organizationId String
  email          String
  role           OrganizationRole @default(VIEWER)
  token          String           @unique
  expiresAt      DateTime
  createdAt      DateTime         @default(now())
  invitedBy      String
  User           User             @relation(fields: [invitedBy], references: [id])
  Organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([organizationId])
}

model OrganizationMember {
  id                                      String           @id
  organizationId                          String
  userId                                  String
  role                                    OrganizationRole @default(VIEWER)
  invitedAt                               DateTime?
  joinedAt                                DateTime         @default(now())
  invitedBy                               String?
  User_OrganizationMember_invitedByToUser User?            @relation("OrganizationMember_invitedByToUser", fields: [invitedBy], references: [id])
  Organization                            Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  User_OrganizationMember_userIdToUser    User             @relation("OrganizationMember_userIdToUser", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
}

model Project {
  id                String              @id
  name              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  defaultBranch     String              @default("main")
  githubUrl         String
  lastIndexedAt     DateTime?
  ownerId           String
  status            String              @default("idle")
  visibility        String              @default("public")
  lastFullScanAt    DateTime?
  organizationId    String?
  ActivityLog       ActivityLog[]
  ActivityEvent     ActivityEvent[]
  AgentFeedback     AgentFeedback[]
  AgentMemory       AgentMemory[]
  AutoFixConfig     AutoFixConfig?
  AutoFixMetrics    AutoFixMetrics[]
  AutoFixSession    AutoFixSession[]
  ChatSession       ChatSession[]
  CodeChunk         CodeChunk[]
  Commit            Commit[]
  Contributor       Contributor[]
  DeveloperInsights DeveloperInsights[]
  FeedbackAnalytics FeedbackAnalytics[]
  Issue             Issue[]
  Organization      Organization?       @relation(fields: [organizationId], references: [id])
  User              User                @relation(fields: [ownerId], references: [id])
  ProjectConfig     ProjectConfig?
  ProjectFile       ProjectFile[]
  PullRequest       PullRequest[]
  TimeTracking      TimeTracking[]
  ToolExecution     ToolExecution[]
  AIModelUsage      AIModelUsage[]

  @@index([organizationId])
}

model ProjectConfig {
  id                   String   @id
  projectId            String   @unique
  vercelToken          String?
  vercelProjectId      String?
  vercelTeamId         String?
  openaiApiKey         String?
  anthropicApiKey      String?
  githubAppId          String?
  githubPrivateKey     String?
  githubInstallationId String?
  githubWebhookSecret  String?
  githubToken          String?
  encryptionSalt       String?
  isEncrypted          Boolean  @default(false)
  // AI Model Configuration
  preferredModel       String?  @default("gpt-4-turbo-preview")
  fallbackModel        String?  @default("gpt-3.5-turbo")
  maxTokens            Int?     @default(4096)
  temperature          Float?   @default(0.7)
  createdAt            DateTime @default(now())
  updatedAt            DateTime
  Project              Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model AIModelUsage {
  id               String   @id @default(cuid())
  projectId        String
  userId           String?
  modelName        String // "gpt-4-turbo-preview", "claude-3-opus", etc.
  provider         String // "openai", "anthropic", "mistral", "local"
  operation        String // "chat", "embedding", "completion"
  promptTokens     Int
  completionTokens Int
  totalTokens      Int
  costUsd          Float    @default(0)
  durationMs       Int?
  success          Boolean  @default(true)
  errorMessage     String?
  metadata         Json?
  createdAt        DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId, createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
  @@index([modelName, createdAt(sort: Desc)])
  @@index([provider, createdAt(sort: Desc)])
}

model ProjectFile {
  id           String      @id
  projectId    String
  relativePath String
  absolutePath String?
  fileType     String
  language     String
  extension    String
  size         Int
  lines        Int
  lastModified DateTime
  gitSha       String?
  isIndexed    Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime
  CodeChunk    CodeChunk[]
  Project      Project     @relation(fields: [projectId], references: [id])

  @@unique([projectId, relativePath])
  @@index([lastModified])
  @@index([projectId, fileType])
  @@index([projectId])
  @@index([projectId, isIndexed])
}

model PullRequest {
  id             String           @id
  projectId      String
  number         Int
  title          String
  body           String?
  state          PullRequestState @default(OPEN)
  htmlUrl        String
  headBranch     String
  baseBranch     String
  authorLogin    String
  authorUrl      String
  createdAt      DateTime
  updatedAt      DateTime
  closedAt       DateTime?
  mergedAt       DateTime?
  draft          Boolean          @default(false)
  mergeable      Boolean?
  labels         String[]         @default([])
  additions      Int?
  changedFiles   Int?
  contributorId  String?
  deletions      Int?
  isAiGenerated  Boolean          @default(false)
  reviewComments Int?
  Contributor    Contributor?     @relation(fields: [contributorId], references: [id])
  Project        Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, number])
  @@index([contributorId])
  @@index([projectId, createdAt])
  @@index([projectId, state])
}

model TimeTracking {
  id              String    @id
  projectId       String
  userId          String?
  sessionId       String?
  taskType        String
  startTime       DateTime
  endTime         DateTime?
  durationMinutes Int?
  description     String?
  tags            String[]  @default([])
  Project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  User            User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId, startTime])
  @@index([taskType, startTime])
  @@index([userId, startTime])
}

model ToolExecution {
  id              String   @id
  toolName        String
  projectId       String
  userId          String
  sessionId       String?
  input           String
  output          String
  success         Boolean
  executionTimeMs Int
  error           String?
  timestamp       DateTime @default(now())
  metadata        String?
  Project         Project  @relation(fields: [projectId], references: [id])
  User            User     @relation(fields: [userId], references: [id])

  @@index([projectId, timestamp])
  @@index([toolName, timestamp])
  @@index([userId, timestamp])
}

model User {
  id                                                    String               @id
  email                                                 String?              @unique
  name                                                  String?
  createdAt                                             DateTime             @default(now())
  image                                                 String?
  role                                                  String               @default("user")
  ActivityLog                                           ActivityLog[]
  ActivityEvent                                         ActivityEvent[]
  AgentFeedback                                         AgentFeedback[]
  AgentMemory                                           AgentMemory[]
  AutoFixMetrics                                        AutoFixMetrics[]
  AutoFixSession_AutoFixSession_approvedByToUser        AutoFixSession[]     @relation("AutoFixSession_approvedByToUser")
  AutoFixSession_AutoFixSession_userIdToUser            AutoFixSession[]     @relation("AutoFixSession_userIdToUser")
  ChatSession                                           ChatSession[]
  DeveloperInsights                                     DeveloperInsights[]
  FeedbackAnalytics                                     FeedbackAnalytics[]
  Organization                                          Organization[]
  OrganizationInvite                                    OrganizationInvite[]
  OrganizationMember_OrganizationMember_invitedByToUser OrganizationMember[] @relation("OrganizationMember_invitedByToUser")
  OrganizationMember_OrganizationMember_userIdToUser    OrganizationMember[] @relation("OrganizationMember_userIdToUser")
  Project                                               Project[]
  TimeTracking                                          TimeTracking[]
  ToolExecution                                         ToolExecution[]
  Workspace                                             Workspace[]
  AIModelUsage                                          AIModelUsage[]
}

model Workspace {
  id             String   @id @default(cuid())
  name           String
  description    String?
  userId         String
  organizationId String?
  repositories   Json     @default("[]")
  settings       Json     @default("{}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  User           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationId])
  @@index([createdAt])
}

enum ActivityEventStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum ActivityEventType {
  INDEXING_STARTED
  INDEXING_PROGRESS
  INDEXING_COMPLETED
  INDEXING_FAILED
  APR_SESSION_CREATED
  APR_ANALYZING
  APR_CODE_GENERATION
  APR_VALIDATION
  APR_REVIEW
  APR_PR_CREATED
  APR_COMPLETED
  APR_FAILED
  CHAT_MESSAGE_SENT
  CHAT_MESSAGE_RECEIVED
  AUTO_FIX_STARTED
  AUTO_FIX_COMPLETED
  AUTO_FIX_FAILED
  CODE_SCAFFOLDING
  TEST_GENERATION
}

enum ActivityImpact {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ActivityType {
  AI_FIX_STARTED
  AI_FIX_COMPLETED
  AI_FIX_FAILED
  PR_CREATED
  PR_MERGED
  PR_CLOSED
  ISSUE_OPENED
  ISSUE_CLOSED
  COMMIT_PUSHED
  CODE_REVIEWED
  DEPLOYMENT
  BUILD_FAILED
  BUILD_SUCCESS
  TEST_FAILED
  TEST_PASSED
  AI_FIX_REGENERATED
  AI_FIX_CANCELLED
  AI_FIX_DIFF_METRICS
}

enum AgentFeedbackCategory {
  ACCURACY
  HELPFULNESS
  RELEVANCE
  COMPLETENESS
  CLARITY
  SPEED
  OVERALL
}

enum AgentFeedbackType {
  POSITIVE
  NEGATIVE
  NEUTRAL
}

enum AutoFixStatus {
  PENDING
  ANALYZING
  FIXING
  CREATING_PR
  COMPLETED
  FAILED
  CANCELLED
}

enum AutoFixTriggerType {
  MANUAL
  WEBHOOK
  CI_FAILURE
  SCHEDULE
}

enum IssueState {
  OPEN
  CLOSED
}

enum OrganizationRole {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}

enum PullRequestState {
  OPEN
  CLOSED
  MERGED
}
