generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String               @id @default(cuid())
  email                   String?              @unique
  name                    String?
  createdAt               DateTime             @default(now())
  image                   String?
  role                    String               @default("user")
  agentFeedbacks          AgentFeedback[]
  agentMemories           AgentMemory[]
  autoFixMetrics          AutoFixMetrics[]     @relation("AutoFixMetricsUser")
  autoFixApprovals        AutoFixSession[]     @relation("AutoFixApprover")
  autoFixSessions         AutoFixSession[]
  sessions                ChatSession[]
  feedbackAnalytics       FeedbackAnalytics[]
  ownedOrganizations      Organization[]       @relation("OrganizationOwner")
  sentInvites             OrganizationInvite[] @relation("InviteSender")
  invitedMemberships      OrganizationMember[] @relation("MembershipInviter")
  organizationMemberships OrganizationMember[]
  projects                Project[]
  toolExecutions          ToolExecution[]
  developerInsights       DeveloperInsights[]
  activityLogs            ActivityLog[]
  activityEvents          ActivityEvent[]
  timeTracking            TimeTracking[]
}

model Project {
  id                String              @id @default(cuid())
  name              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  defaultBranch     String              @default("main")
  githubUrl         String
  lastIndexedAt     DateTime?
  ownerId           String
  status            String              @default("idle")
  visibility        String              @default("public")
  lastFullScanAt    DateTime?
  organizationId    String?
  agentFeedbacks    AgentFeedback[]
  agentMemories     AgentMemory[]
  autoFixConfig     AutoFixConfig?
  autoFixMetrics    AutoFixMetrics[]
  autoFixSessions   AutoFixSession[]
  sessions          ChatSession[]
  files             CodeChunk[]
  feedbackAnalytics FeedbackAnalytics[]
  issues            Issue[]
  organization      Organization?       @relation(fields: [organizationId], references: [id])
  owner             User                @relation(fields: [ownerId], references: [id])
  projectFiles      ProjectFile[]       @relation("ProjectFiles")
  pullRequests      PullRequest[]
  toolExecutions    ToolExecution[]
  developerInsights DeveloperInsights[]
  activityLogs      ActivityLog[]
  activityEvents    ActivityEvent[]
  timeTracking      TimeTracking[]
  commits           Commit[]
  contributors      Contributor[]
  projectConfigs    ProjectConfig[]

  @@index([organizationId])
}

model ChatSession {
  id           String    @id @default(cuid())
  projectId    String
  userId       String
  title        String    @default("New Chat")
  summary      String?
  totalTokens  Int       @default(0)
  messageCount Int       @default(0)
  createdAt    DateTime  @default(now())
  lastActiveAt DateTime  @default(now())
  project      Project   @relation(fields: [projectId], references: [id])
  user         User      @relation(fields: [userId], references: [id])
  messages     Message[]

  @@index([lastActiveAt])
}

model Message {
  id             String         @id @default(cuid())
  sessionId      String
  role           String
  content        String
  tokenCount     Int?
  contextTokens  Int?
  memoryIncluded Boolean        @default(false)
  latencyMs      Int?
  createdAt      DateTime       @default(now())
  feedback       AgentFeedback?
  session        ChatSession    @relation(fields: [sessionId], references: [id])

  @@index([sessionId, createdAt])
}

/// Each row = code chunk with its embedding
model CodeChunk {
  id            String       @id @default(cuid())
  projectId     String
  path          String
  sha           String
  language      String
  startLine     Int
  endLine       Int
  content       String
  tokenCount    Int
  // pgvector column (1536 dims). Stored as real vector after migration.
  embedding     Unsupported("vector(1536)")?
  updatedAt     DateTime     @updatedAt
  projectFileId String?
  projectFile   ProjectFile? @relation("FileChunks", fields: [projectFileId], references: [id])
  project       Project      @relation(fields: [projectId], references: [id])

  @@index([projectId])
  @@index([projectId, path])
  @@index([projectFileId])
}

/// Full file metadata for repository synchronization
model ProjectFile {
  id           String      @id @default(cuid())
  projectId    String
  relativePath String
  absolutePath String?
  fileType     String
  language     String
  extension    String
  size         Int
  lines        Int
  lastModified DateTime
  gitSha       String?
  isIndexed    Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  chunks       CodeChunk[] @relation("FileChunks")
  project      Project     @relation("ProjectFiles", fields: [projectId], references: [id])

  @@unique([projectId, relativePath])
  @@index([projectId])
  @@index([projectId, isIndexed])
  @@index([projectId, fileType])
  @@index([lastModified])
}

model ToolExecution {
  id              String   @id @default(cuid())
  toolName        String
  projectId       String
  userId          String
  sessionId       String?
  input           String
  output          String
  success         Boolean
  executionTimeMs Int
  error           String?
  timestamp       DateTime @default(now())
  metadata        String?
  project         Project  @relation(fields: [projectId], references: [id])
  user            User     @relation(fields: [userId], references: [id])

  @@index([toolName, timestamp])
  @@index([projectId, timestamp])
  @@index([userId, timestamp])
}

model AgentMemory {
  id               String   @id @default(cuid())
  sessionId        String
  projectId        String
  userId           String
  command          String
  memorySnapshot   String
  tokenUsage       Int
  memorySize       Int
  contextRelevance Float?
  responseQuality  Float?
  executionTimeMs  Int
  toolsUsed        String
  summary          String?
  createdAt        DateTime @default(now())
  project          Project  @relation(fields: [projectId], references: [id])
  user             User     @relation(fields: [userId], references: [id])

  @@index([sessionId])
  @@index([projectId, createdAt])
  @@index([userId, createdAt])
  @@index([command, createdAt])
}

model AgentFeedback {
  id           String                @id @default(cuid())
  sessionId    String
  messageId    String                @unique
  userId       String
  projectId    String
  feedbackType AgentFeedbackType
  rating       Int
  comment      String?
  category     AgentFeedbackCategory
  responseTime Int?
  contextData  String?
  createdAt    DateTime              @default(now())
  message      Message               @relation(fields: [messageId], references: [id])
  project      Project               @relation(fields: [projectId], references: [id])
  user         User                  @relation(fields: [userId], references: [id])

  @@index([sessionId])
  @@index([userId, createdAt])
  @@index([projectId, createdAt])
  @@index([feedbackType, rating])
  @@index([category, rating])
}

model FeedbackAnalytics {
  id                String   @id @default(cuid())
  projectId         String
  userId            String?
  period            String
  periodStart       DateTime
  periodEnd         DateTime
  totalFeedbacks    Int      @default(0)
  avgRating         Float?
  ratingCounts      String
  categoryBreakdown String
  topIssues         String?
  improvement       Float?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  project           Project  @relation(fields: [projectId], references: [id])
  user              User?    @relation(fields: [userId], references: [id])

  @@unique([projectId, userId, period, periodStart])
  @@index([projectId, period, periodStart])
  @@index([userId, period, periodStart])
}

model Organization {
  id          String               @id @default(cuid())
  name        String
  description String?
  slug        String               @unique
  avatarUrl   String?
  plan        String               @default("free")
  maxProjects Int                  @default(5)
  maxMembers  Int                  @default(10)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  ownerId     String
  owner       User                 @relation("OrganizationOwner", fields: [ownerId], references: [id])
  invites     OrganizationInvite[]
  members     OrganizationMember[]
  projects    Project[]

  @@index([ownerId])
}

model OrganizationMember {
  id             String           @id @default(cuid())
  organizationId String
  userId         String
  role           OrganizationRole @default(VIEWER)
  invitedAt      DateTime?
  joinedAt       DateTime         @default(now())
  invitedBy      String?
  inviter        User?            @relation("MembershipInviter", fields: [invitedBy], references: [id])
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
}

model OrganizationInvite {
  id             String           @id @default(cuid())
  organizationId String
  email          String
  role           OrganizationRole @default(VIEWER)
  token          String           @unique
  expiresAt      DateTime
  createdAt      DateTime         @default(now())
  invitedBy      String
  inviter        User             @relation("InviteSender", fields: [invitedBy], references: [id])
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([email])
}

model AutoFixSession {
  id               String             @id @default(cuid())
  projectId        String
  userId           String?
  status           AutoFixStatus      @default(PENDING)
  triggerType      AutoFixTriggerType @default(MANUAL)
  logContent       String?
  issuesDetected   String
  projectContext   String?
  analysisResult   String?
  fixesGenerated   String?
  branchName       String?
  commitSha        String?
  prUrl            String?
  prNumber         Int?
  filesChanged     String?
  processingTimeMs Int?
  errorMessage     String?
  confidence       Float?
  requiresApproval Boolean            @default(true)
  approvedAt       DateTime?
  approvedBy       String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  startedAt        DateTime?
  completedAt      DateTime?
  results          AutoFixResult[]
  attempts         AutoFixAttempt[]
  validations      AutoFixValidation[]
  reviews          AutoFixReview[]
  approver         User?              @relation("AutoFixApprover", fields: [approvedBy], references: [id])
  project          Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user             User?              @relation(fields: [userId], references: [id])

  @@index([projectId, createdAt])
  @@index([userId, createdAt])
  @@index([status])
  @@index([triggerType, createdAt])
}

model AutoFixResult {
  id               String         @id @default(cuid())
  sessionId        String
  success          Boolean
  message          String
  issueType        String
  severity         String
  filePath         String
  changeType       String
  linesAdded       Int            @default(0)
  linesRemoved     Int            @default(0)
  confidence       Float?
  testability      String?
  reviewComplexity String?
  createdAt        DateTime       @default(now())
  session          AutoFixSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([success, createdAt])
  @@index([issueType, severity])
}

model AutoFixConfig {
  id                  String   @id @default(cuid())
  projectId           String   @unique
  enabled             Boolean  @default(true)
  requireApproval     Boolean  @default(true)
  maxFixesPerHour     Int      @default(3)
  branchPrefix        String   @default("codemind/auto-fix")
  commitPrefix        String   @default("fix: ")
  prTitle             String   @default("🤖 Auto Fix: {issue}")
  prBody              String   @default("This PR was automatically created by CodeMind to fix detected issues.\n\n## Changes Made\n{changes}\n\n## Issue Analysis\n{analysis}\n\n## Testing\n- [ ] Builds successfully\n- [ ] Tests pass\n- [ ] Manual review completed\n\nPlease review the changes carefully before merging.")
  autoFixBuildErrors  Boolean  @default(true)
  autoFixTestFailures Boolean  @default(true)
  autoFixLintErrors   Boolean  @default(true)
  autoFixSecurity     Boolean  @default(false)
  autoFixDependencies Boolean  @default(true)
  autoFixSyntax       Boolean  @default(true)
  notifyOnSuccess     Boolean  @default(true)
  notifyOnFailure     Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  project             Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model AutoFixMetrics {
  id                    String   @id @default(cuid())
  projectId             String
  userId                String?
  period                String
  periodStart           DateTime
  periodEnd             DateTime
  totalSessions         Int      @default(0)
  successfulSessions    Int      @default(0)
  failedSessions        Int      @default(0)
  totalIssuesDetected   Int      @default(0)
  totalIssuesFixed      Int      @default(0)
  issueTypeBreakdown    String?
  avgProcessingTime     Int?
  avgConfidence         Float?
  totalPRsCreated       Int      @default(0)
  totalPRsMerged        Int      @default(0)
  avgPRSize             Int?
  humanInterventionRate Float?
  rollbackRate          Float?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  project               Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user                  User?    @relation("AutoFixMetricsUser", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId, period, periodStart])
  @@index([projectId, period, periodStart])
  @@index([userId, period, periodStart])
}

enum AgentFeedbackType {
  POSITIVE
  NEGATIVE
  NEUTRAL
}

enum AgentFeedbackCategory {
  ACCURACY
  HELPFULNESS
  RELEVANCE
  COMPLETENESS
  CLARITY
  SPEED
  OVERALL
}

enum OrganizationRole {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}

enum AutoFixStatus {
  PENDING
  ANALYZING
  FIXING
  CREATING_PR
  COMPLETED
  FAILED
  CANCELLED
}

enum AutoFixTriggerType {
  MANUAL
  WEBHOOK
  CI_FAILURE
  SCHEDULE
}

model PullRequest {
  id          String           @id @default(cuid())
  projectId   String
  number      Int
  title       String
  body        String?
  state       PullRequestState @default(OPEN)
  htmlUrl     String
  headBranch  String
  baseBranch  String
  authorLogin String
  authorUrl   String
  createdAt   DateTime
  updatedAt   DateTime
  closedAt    DateTime?
  mergedAt    DateTime?
  draft       Boolean          @default(false)
  mergeable   Boolean?
  labels      String[]         @default([])
  additions   Int?
  deletions   Int?
  changedFiles Int?
  reviewComments Int?
  isAiGenerated Boolean        @default(false)
  contributorId String?
  contributor Contributor?     @relation(fields: [contributorId], references: [id])
  project     Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, number])
  @@index([projectId, state])
  @@index([projectId, createdAt])
  @@index([contributorId])
}

model Issue {
  id          String     @id @default(cuid())
  projectId   String
  number      Int
  title       String
  body        String?
  state       IssueState @default(OPEN)
  htmlUrl     String
  authorLogin String
  authorUrl   String
  assignees   String[]   @default([])
  labels      String[]   @default([])
  createdAt   DateTime
  updatedAt   DateTime
  closedAt    DateTime?
  // AI persistence fields
  aiAnalyzed   Boolean   @default(false)
  aiAnalyzedAt DateTime?
  aiSummary    String?
  aiFixPrUrl   String?
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, number])
  @@index([projectId, state])
  @@index([projectId, createdAt])
}

enum PullRequestState {
  OPEN
  CLOSED
  MERGED
}

enum IssueState {
  OPEN
  CLOSED
}

// Enhanced Analytics Models for Developer Insights Dashboard
model DeveloperInsights {
  id                    String   @id @default(cuid())
  projectId             String
  userId                String?
  period                String   // "daily", "weekly", "monthly", "quarterly", "yearly"
  periodStart           DateTime
  periodEnd             DateTime
  
  // Core Metrics
  totalAiFixes          Int      @default(0)
  successfulFixes       Int      @default(0)
  failedFixes           Int      @default(0)
  successRate           Float    @default(0)
  
  // Time Savings
  estimatedHoursSaved   Float    @default(0)
  avgFixTimeMinutes     Int      @default(0)
  totalFixTimeMinutes   Int      @default(0)
  
  // Repository Activity
  totalCommits          Int      @default(0)
  totalPRsCreated       Int      @default(0)
  totalPRsMerged        Int      @default(0)
  totalIssuesResolved   Int      @default(0)
  
  // Code Quality Metrics
  linesOfCodeFixed      Int      @default(0)
  bugsFixed             Int      @default(0)
  securityIssuesFixed   Int      @default(0)
  performanceImprovements Int    @default(0)
  
  // Efficiency Metrics  
  avgCodeReviewTime     Int?     // minutes
  prMergeRate           Float    @default(0)
  rollbackRate          Float    @default(0)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  project               Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user                  User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId, period, periodStart])
  @@index([projectId, period, periodStart])
  @@index([userId, period, periodStart])
}

model ActivityLog {
  id            String           @id @default(cuid())
  projectId     String
  userId        String?
  activityType  ActivityType
  entityType    String           // "issue", "pr", "commit", "ai_fix"
  entityId      String
  description   String
  metadata      String?          // JSON string for additional data
  duration      Int?             // activity duration in minutes
  impact        ActivityImpact   @default(LOW)
  createdAt     DateTime         @default(now())
  
  project       Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user          User?            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId, createdAt])
  @@index([userId, createdAt])
  @@index([activityType, createdAt])
}

// AI Activity Feed for real-time visibility into all AI operations
model ActivityEvent {
  id          String              @id @default(cuid())
  projectId   String
  userId      String?
  eventType   ActivityEventType
  entityType  String              // "indexing", "apr_session", "chat_message", "auto_fix", "code_generation"
  entityId    String?
  title       String
  description String?             @db.Text
  metadata    String?             @db.Text  // JSON string for additional data (file paths, line numbers, etc.)
  status      ActivityEventStatus @default(IN_PROGRESS)
  duration    Int?                // duration in milliseconds
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  
  project     Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User?               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId, createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
  @@index([eventType, createdAt(sort: Desc)])
  @@index([status, createdAt(sort: Desc)])
  @@index([projectId, eventType, createdAt(sort: Desc)])
}

model TimeTracking {
  id              String   @id @default(cuid())
  projectId       String
  userId          String?
  sessionId       String?  // Links to AI fix session
  taskType        String   // "ai_fix", "code_review", "debugging", "feature_development"
  startTime       DateTime
  endTime         DateTime?
  durationMinutes Int?
  description     String?
  tags            String[] @default([])
  
  project         Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId, startTime])
  @@index([userId, startTime])
  @@index([taskType, startTime])
}

enum ActivityType {
  AI_FIX_STARTED
  AI_FIX_COMPLETED
  AI_FIX_FAILED
  AI_FIX_REGENERATED
  AI_FIX_CANCELLED
  AI_FIX_DIFF_METRICS
  PR_CREATED
  PR_MERGED
  PR_CLOSED
  ISSUE_OPENED
  ISSUE_CLOSED
  COMMIT_PUSHED
  CODE_REVIEWED
  DEPLOYMENT
  BUILD_FAILED
  BUILD_SUCCESS
  TEST_FAILED
  TEST_PASSED
}

enum ActivityImpact {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ActivityEventType {
  INDEXING_STARTED
  INDEXING_PROGRESS
  INDEXING_COMPLETED
  INDEXING_FAILED
  APR_SESSION_CREATED
  APR_ANALYZING
  APR_CODE_GENERATION
  APR_VALIDATION
  APR_REVIEW
  APR_PR_CREATED
  APR_COMPLETED
  APR_FAILED
  CHAT_MESSAGE_SENT
  CHAT_MESSAGE_RECEIVED
  AUTO_FIX_STARTED
  AUTO_FIX_COMPLETED
  AUTO_FIX_FAILED
  CODE_SCAFFOLDING
  TEST_GENERATION
}

enum ActivityEventStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

// Project Analytics Models
model Commit {
  id          String       @id @default(cuid())
  sha         String       @unique
  message     String
  author      String
  authorEmail String?
  additions   Int?
  deletions   Int?
  date        DateTime
  url         String?
  projectId   String
  contributorId String?
  branch      String?
  isAiGenerated Boolean    @default(false)
  filesChanged String[]    @default([])
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  contributor Contributor? @relation(fields: [contributorId], references: [id])
  
  @@index([projectId, date])
  @@index([contributorId])
  @@index([projectId, branch])
  @@index([date])
}

model Contributor {
  id           String        @id @default(cuid())
  githubId     String?       @unique
  username     String
  avatarUrl    String?
  email        String?
  name         String?
  projectId    String
  totalCommits Int           @default(0)
  totalAdditions Int         @default(0) 
  totalDeletions Int         @default(0)
  totalPRs     Int           @default(0)
  lastActiveAt DateTime?
  joinedAt     DateTime      @default(now())
  commits      Commit[]
  pullRequests PullRequest[]
  project      Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, username])
  @@index([projectId])
  @@index([githubId])
  @@index([lastActiveAt])
}

// Dynamic Project Configuration System
model ProjectConfig {
  id                    String   @id @default(cuid())
  projectId             String   @unique
  vercelToken           String?
  vercelProjectId       String?
  vercelTeamId          String?
  openaiApiKey          String?
  githubAppId           String?
  githubPrivateKey      String?
  githubInstallationId  String?
  githubWebhookSecret   String?
  githubToken           String?
  // Jira Integration
  jiraApiToken          String?
  jiraEmail             String?
  jiraDomain            String?  // e.g., "yourcompany.atlassian.net"
  jiraProjectKey        String?  // e.g., "PROJ"
  // Trello Integration
  trelloApiKey          String?
  trelloToken           String?
  trelloBoardId         String?
  encryptionSalt        String?  // For encrypting sensitive data
  isEncrypted           Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  project               Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([projectId])
}

// ============================================================================
// APR (Autonomous Pull Request) System Models
// ============================================================================

// Tracks each code generation attempt within an AutoFix session
model AutoFixAttempt {
  id             String         @id @default(cuid())
  sessionId      String
  attemptNumber  Int
  filesModified  String[]       @default([])
  prompt         String         @db.Text
  aiResponse     String         @db.Text
  codeSnippets   String         @db.Text
  success        Boolean        @default(false)
  errorMessage   String?        @db.Text
  createdAt      DateTime       @default(now())
  session        AutoFixSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@index([sessionId])
  @@index([sessionId, attemptNumber])
}

// Stores validation results for each attempt
model AutoFixValidation {
  id             String         @id @default(cuid())
  sessionId      String
  attemptNumber  Int
  validationType String         // LINT, TYPECHECK, UNIT_TEST, E2E_TEST, SECURITY_SCAN, PERFORMANCE
  passed         Boolean
  output         String         @db.Text
  errors         String?        @db.Text
  duration       Int?           // milliseconds
  executedAt     DateTime       @default(now())
  session        AutoFixSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@index([sessionId])
  @@index([sessionId, validationType])
  @@index([passed])
}

// AI code review findings for each session
model AutoFixReview {
  id                String         @id @default(cuid())
  sessionId         String
  reviewType        String         // CODE_QUALITY, PERFORMANCE, SECURITY, BEST_PRACTICES, POTENTIAL_BUG, N_PLUS_ONE, MEMORY_LEAK, ERROR_HANDLING
  severity          String         // CRITICAL, HIGH, MEDIUM, LOW, INFO
  filePath          String
  lineNumber        Int?
  issue             String         @db.Text
  explanation       String         @db.Text
  suggestion        String?        @db.Text
  category          String         // performance, security, maintainability, etc.
  tags              String[]       @default([])
  postedToGitHub    Boolean        @default(false)
  githubCommentId   Int?
  references        String[]       @default([])
  createdAt         DateTime       @default(now())
  session           AutoFixSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@index([sessionId])
  @@index([sessionId, severity])
  @@index([reviewType])
  @@index([postedToGitHub])
}

// Complete history and audit trail for each AutoFix session
model AutoFixHistory {
  id               String   @id @default(cuid())
  sessionId        String   @unique
  projectId        String
  issueDescription String   @db.Text
  attempts         String   @db.Text // JSON array of all attempts
  finalStatus      String
  prNumber         Int?
  prUrl            String?
  totalAttempts    Int      @default(0)
  validationsPassed Int     @default(0)
  validationsFailed Int     @default(0)
  reviewFindings    Int     @default(0)
  retryCount        Int     @default(0)
  createdAt         DateTime
  completedAt       DateTime?
  
  @@index([projectId])
  @@index([sessionId])
  @@index([finalStatus])
  @@index([createdAt])
}
